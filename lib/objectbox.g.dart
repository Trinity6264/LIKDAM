// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/category_model.dart';
import 'model/project_model.dart';
import 'model/task_model.dart';
import 'model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6924370605578254198),
      name: 'ProjectModel',
      lastPropertyId: const IdUid(8, 2592753063072455303),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 923883062907587588),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3773338440958967226),
            name: 'projectTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3117937746073828028),
            name: 'projectDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9159761921901698143),
            name: 'projectStart',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4078341709163064756),
            name: 'projectEnd',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5468530445108340258),
            name: 'isCancel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4096843003138886364),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 912545853286075783),
            relationTarget: 'UserModel'),
        ModelProperty(
            id: const IdUid(8, 2592753063072455303),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3412855859970755840),
            relationTarget: 'CategoryModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'task', srcEntity: 'TaskModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 7975128368317523890),
      name: 'UserModel',
      lastPropertyId: const IdUid(5, 3150105705961320694),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7785000072436260556),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1662957889903922519),
            name: 'username',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 7106867697336632219)),
        ModelProperty(
            id: const IdUid(3, 6708114939456310982),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5716142099954337809),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3150105705961320694),
            name: 'userJoined',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'project', srcEntity: 'ProjectModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 2637969379473945590),
      name: 'CategoryModel',
      lastPropertyId: const IdUid(2, 1361236983191956100),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6301856770923171633),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1361236983191956100),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'project', srcEntity: 'ProjectModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(4, 5286426665128033510),
      name: 'TaskModel',
      lastPropertyId: const IdUid(4, 2289199971174911271),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7891814206626453194),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8256764269003077873),
            name: 'taskContent',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2282696118919747426),
            name: 'isDone',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2289199971174911271),
            name: 'projectId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 7016216962005333229),
            relationTarget: 'ProjectModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 5286426665128033510),
      lastIndexId: const IdUid(4, 7016216962005333229),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ProjectModel: EntityDefinition<ProjectModel>(
        model: _entities[0],
        toOneRelations: (ProjectModel object) => [object.user, object.category],
        toManyRelations: (ProjectModel object) => {
              RelInfo<TaskModel>.toOneBacklink(
                      4, object.id, (TaskModel srcObject) => srcObject.project):
                  object.task
            },
        getId: (ProjectModel object) => object.id,
        setId: (ProjectModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProjectModel object, fb.Builder fbb) {
          final projectTitleOffset = fbb.writeString(object.projectTitle);
          final projectDescriptionOffset =
              fbb.writeString(object.projectDescription);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, projectTitleOffset);
          fbb.addOffset(2, projectDescriptionOffset);
          fbb.addInt64(3, object.projectStart.millisecondsSinceEpoch);
          fbb.addInt64(4, object.projectEnd.millisecondsSinceEpoch);
          fbb.addBool(5, object.isCancel);
          fbb.addInt64(6, object.user.targetId);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProjectModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              projectTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              projectDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              projectStart: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              projectEnd: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              isCancel: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.user.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.category.attach(store);
          InternalToManyAccess.setRelInfo(
              object.task,
              store,
              RelInfo<TaskModel>.toOneBacklink(
                  4, object.id, (TaskModel srcObject) => srcObject.project),
              store.box<ProjectModel>());
          return object;
        }),
    UserModel: EntityDefinition<UserModel>(
        model: _entities[1],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {
              RelInfo<ProjectModel>.toOneBacklink(
                      7, object.id, (ProjectModel srcObject) => srcObject.user):
                  object.project
            },
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, roleOffset);
          fbb.addInt64(4, object.userJoined.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              role: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              userJoined: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));
          InternalToManyAccess.setRelInfo(
              object.project,
              store,
              RelInfo<ProjectModel>.toOneBacklink(
                  7, object.id, (ProjectModel srcObject) => srcObject.user),
              store.box<UserModel>());
          return object;
        }),
    CategoryModel: EntityDefinition<CategoryModel>(
        model: _entities[2],
        toOneRelations: (CategoryModel object) => [],
        toManyRelations: (CategoryModel object) => {
              RelInfo<ProjectModel>.toOneBacklink(8, object.id,
                      (ProjectModel srcObject) => srcObject.category):
                  object.project
            },
        getId: (CategoryModel object) => object.id,
        setId: (CategoryModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CategoryModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(
              object.project,
              store,
              RelInfo<ProjectModel>.toOneBacklink(
                  8, object.id, (ProjectModel srcObject) => srcObject.category),
              store.box<CategoryModel>());
          return object;
        }),
    TaskModel: EntityDefinition<TaskModel>(
        model: _entities[3],
        toOneRelations: (TaskModel object) => [object.project],
        toManyRelations: (TaskModel object) => {},
        getId: (TaskModel object) => object.id,
        setId: (TaskModel object, int id) {
          object.id = id;
        },
        objectToFB: (TaskModel object, fb.Builder fbb) {
          final taskContentOffset = fbb.writeString(object.taskContent);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskContentOffset);
          fbb.addBool(2, object.isDone);
          fbb.addInt64(3, object.project.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              taskContent: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isDone: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 8, false));
          object.project.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.project.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ProjectModel] entity fields to define ObjectBox queries.
class ProjectModel_ {
  /// see [ProjectModel.id]
  static final id =
      QueryIntegerProperty<ProjectModel>(_entities[0].properties[0]);

  /// see [ProjectModel.projectTitle]
  static final projectTitle =
      QueryStringProperty<ProjectModel>(_entities[0].properties[1]);

  /// see [ProjectModel.projectDescription]
  static final projectDescription =
      QueryStringProperty<ProjectModel>(_entities[0].properties[2]);

  /// see [ProjectModel.projectStart]
  static final projectStart =
      QueryIntegerProperty<ProjectModel>(_entities[0].properties[3]);

  /// see [ProjectModel.projectEnd]
  static final projectEnd =
      QueryIntegerProperty<ProjectModel>(_entities[0].properties[4]);

  /// see [ProjectModel.isCancel]
  static final isCancel =
      QueryBooleanProperty<ProjectModel>(_entities[0].properties[5]);

  /// see [ProjectModel.user]
  static final user =
      QueryRelationToOne<ProjectModel, UserModel>(_entities[0].properties[6]);

  /// see [ProjectModel.category]
  static final category = QueryRelationToOne<ProjectModel, CategoryModel>(
      _entities[0].properties[7]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// see [UserModel.id]
  static final id = QueryIntegerProperty<UserModel>(_entities[1].properties[0]);

  /// see [UserModel.username]
  static final username =
      QueryStringProperty<UserModel>(_entities[1].properties[1]);

  /// see [UserModel.password]
  static final password =
      QueryStringProperty<UserModel>(_entities[1].properties[2]);

  /// see [UserModel.role]
  static final role =
      QueryStringProperty<UserModel>(_entities[1].properties[3]);

  /// see [UserModel.userJoined]
  static final userJoined =
      QueryIntegerProperty<UserModel>(_entities[1].properties[4]);
}

/// [CategoryModel] entity fields to define ObjectBox queries.
class CategoryModel_ {
  /// see [CategoryModel.id]
  static final id =
      QueryIntegerProperty<CategoryModel>(_entities[2].properties[0]);

  /// see [CategoryModel.name]
  static final name =
      QueryStringProperty<CategoryModel>(_entities[2].properties[1]);
}

/// [TaskModel] entity fields to define ObjectBox queries.
class TaskModel_ {
  /// see [TaskModel.id]
  static final id = QueryIntegerProperty<TaskModel>(_entities[3].properties[0]);

  /// see [TaskModel.taskContent]
  static final taskContent =
      QueryStringProperty<TaskModel>(_entities[3].properties[1]);

  /// see [TaskModel.isDone]
  static final isDone =
      QueryBooleanProperty<TaskModel>(_entities[3].properties[2]);

  /// see [TaskModel.project]
  static final project =
      QueryRelationToOne<TaskModel, ProjectModel>(_entities[3].properties[3]);
}
